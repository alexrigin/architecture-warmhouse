@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Container Diagram for SmartHome system

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddRelTag("Kafka events", $textColor="darkgreen", $lineColor="darkgreen", $lineStyle = SolidLine())
AddRelTag("Devices input/output", $textColor="brown", $lineColor="brown", $lineStyle = DashedLine())

SHOW_PERSON_OUTLINE()

Person(user, User/Admin, "Пользователь умного дома")

System_Boundary(c1, "SmartHome") {
    Container(web_app, "Web-App", "Javascript, ReactJS", "Веб-приложение для управления умным домом")

    Container(api_gateway, "ApiGateway", "Go", "Шлюз, отвечающий за балансировку, аутентификацию и маршрутизацию")

    'Container(auth_service, "Auth Service", "Go", "Аутентификация", $tags = "microService")

    Container(users_service, "Users Service", "Go", "Регистрация пользователей, управление ролями", $tags = "microService")
    ContainerDb(users_db, "Users DB", "PostgreSQL", "", $tags = "storage")

    Container(device_management_service, "DeviceManagement Service", "Go", "- Регистрация и управление устройствами\nХранение метаданных устройств", $tags = "microService")
    ContainerDb(devices_db, "Devices DB", "PostgreSQL", "", $tags = "storage")

    Container(automation_service, "Automation Service", "Go", "- Создание пользовательских сценариев\n- Запуск сценариев по времени, триггерам или вручную", $tags = "microService")
    ContainerDb(automation_db, "Automation DB", "PostgreSQL", "", $tags = "storage")

    Container(video_service, "Video Service", "Go", "- Запись и хранение видео с камер видеонаблюдения\n- детекция событий", $tags = "microService")
    ContainerDb(video_db, "Video DB", "PostgreSQL", "", $tags = "storage")
    ContainerDb(video_storage, "Videos", "local/cloud storage", "", $tags = "storage")

    Container(telemetry_service, "Telemetry Service", "Go", "Сбор данных с устройств (температура, энергопотребление, статус и т.д.)", $tags = "microService")
    ContainerDb(telemetry_db, "Telemetry DB", "ClickHouse", "", $tags = "storage")
    ContainerQueue(kafka, "kafka", "kafka")
    ContainerQueue(mqtt, "MQTT", "MQTT")
}

Boundary(c2, "Устройства") {
    Container_Ext(gate, "Устройство открытия/закрытия ворот")
    Container_Ext(light, "Свет")
    Container_Ext(camera, "Камера")
    Container_Ext(heating_system, "Система отопления")
    Container_Ext(temperature_sensor, "Датчик температуры")
}

Rel_D(user, web_app, "Взаимодействует с сайтом", "HTTPS, WebBrowser")
Rel_D(web_app, api_gateway, "Отправляет запрос в платформу", "JSON/HTTPS")

'Rel_R(api_gateway, auth_service, "-получение токена\n-валидация токена", "JSON/HTTPS")
Rel_R(api_gateway, users_service, "Регистрация/обновление, получение информации", "JSON/HTTPS")
Rel(api_gateway, automation_service, "Uses", "JSON/HTTPS")
Rel(api_gateway, device_management_service, "Uses", "JSON/HTTPS")
Rel(api_gateway, telemetry_service, "Uses", "JSON/HTTPS")
Rel(api_gateway, video_service, "Uses", "JSON/HTTPS")
'Rel_R(auth_service, users_service, "Проверка пользователя/кредов", "JSON/HTTPS")
Rel_R(users_service, users_db, "read/write", "pq")
Rel_D(device_management_service, devices_db, "read/write", "pq")
Rel(automation_service, automation_db, "read/write", "pq")
Rel(telemetry_service, telemetry_db, "read/write")
Rel(video_service, video_db, "read/write", "pq")
Rel(video_service, video_storage, "read/write", "")

Rel(device_management_service, kafka, "информация по устройствам", "", $tags = "Kafka events")
Rel(kafka, automation_service, ".", "", $tags = "Kafka events")
Rel(kafka, video_service, ".", "", $tags = "Kafka events")

Rel(mqtt, telemetry_service, "телеметрия", $tags = "Devices input/output")
Rel(device_management_service, mqtt, "запросы/команды на устройства", $tags = "Devices input/output")
Rel(mqtt, automation_service, "события для сценариев", $tags = "Devices input/output")

BiRel(camera, video_service, "стриминг видео", "http(s)", $tags = "Devices input/output")
BiRel(mqtt, light, "команда на включение/выключение", $tags = "Devices input/output")
BiRel(mqtt, gate, "команда на открытие/закрытие", $tags = "Devices input/output")
BiRel(mqtt, heating_system, "команда на изменение температуры", $tags = "Devices input/output")
BiRel(mqtt, temperature_sensor, "текущая температура", $tags = "Devices input/output")

Lay_U(kafka, video_service)
Lay_R(telemetry_service, automation_service )
Lay_R(automation_service, device_management_service)
Lay_R(device_management_service, video_service)
Lay_D(kafka,mqtt)

SHOW_LEGEND()

@enduml